{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","imgSrc","this","props","id","slice","className","name","src","alt","type","exp","Component","Pokedex","title","isWinner","Pokemon","map","p","base_experience","key","Pokegame","hand1","hand2","length","randIdx","Math","floor","random","randPokemon","splice","push","exp1","reduce","exp2","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAuBeA,G,6KAdP,IAJUC,EAINC,EAAM,UANN,8DAMM,QAJAD,EAIuBE,KAAKC,MAAMC,KAJZ,IAAM,YAAKJ,GAASK,OAAO,GAAKL,EAItD,QACV,OACA,yBAAKM,UAAU,YACX,4BAAKJ,KAAKC,MAAMI,MAChB,yBAAKD,UAAU,QACX,yBAAKE,IAAKP,EAAQQ,IAAKP,KAAKC,MAAMI,QAEtC,yBAAKD,UAAU,iBAAf,SAAsCJ,KAAKC,MAAMO,MACjD,yBAAKJ,UAAU,iBAAf,QAAqCJ,KAAKC,MAAMQ,U,GAVrCC,cCmBRC,G,6KApBP,IAAIC,EAMJ,OAJIA,EADAZ,KAAKC,MAAMY,SACH,wBAAIT,UAAU,kBAAd,kBAEA,wBAAIA,UAAU,iBAAd,kBAGR,yBAAKA,UAAU,WACVQ,EACD,kDAAwBZ,KAAKC,MAAMQ,KAC/B,yBAAKL,UAAU,gBACVJ,KAAKC,MAAMa,QAAQC,KAAI,SAACC,EAAGX,GAAJ,OACpB,kBAAC,EAAD,CAAUH,GAAIc,EAAEd,GAAIG,KAAMW,EAAEX,KAAMG,KAAMQ,EAAER,KAAMC,IAAKO,EAAEC,gBAAiBC,IAAKb,a,GAdnFK,cCDhBS,E,uKAgBE,IAFA,IAAIC,EAAQ,GACRC,EAAK,YAAOrB,KAAKC,MAAMa,SACrBM,EAAME,OAASD,EAAMC,QAAQ,CAC/B,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QAC3CK,EAAaN,EAAMO,OAAOL,EAAQ,GAAG,GACzCH,EAAMS,KAAKF,GAEf,IAAIG,EAAOV,EAAMW,QAAO,SAACtB,EAAKK,GAAN,OAAkBL,EAAMK,EAAQG,kBAC5D,GACQe,EAAOX,EAAMU,QAAO,SAACtB,EAAKK,GAAN,OAAkBL,EAAMK,EAAQG,kBAC5D,GACI,OACI,6BACI,kBAAC,EAAD,CAASH,QAAUM,EAAOX,IAAKqB,EAAMjB,SAAUiB,EAAOE,IACtD,kBAAC,EAAD,CAASlB,QAAUO,EAAOZ,IAAKuB,EAAMnB,SAAUmB,EAAOF,S,GA5B/CpB,aAAjBS,EACKc,aAAe,CAClBnB,QAAU,CACN,CAACZ,GAAI,EAAGG,KAAM,aAAcG,KAAM,OAAQS,gBAAiB,IAC3D,CAACf,GAAI,EAAGG,KAAM,WAAYG,KAAM,QAASS,gBAAiB,IAC1D,CAACf,GAAI,GAAIG,KAAM,UAAWG,KAAM,MAAOS,gBAAiB,IACxD,CAACf,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUS,gBAAiB,KAC9D,CAACf,GAAI,GAAIG,KAAM,UAAWG,KAAM,WAAYS,gBAAiB,KAC7D,CAACf,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUS,gBAAiB,IAC9D,CAACf,GAAI,GAAIG,KAAM,SAAUG,KAAM,SAAUS,gBAAiB,KAC1D,CAACf,GAAI,IAAKG,KAAM,QAASG,KAAM,SAAUS,gBAAiB,MAuBvDE,QCxBAe,MARf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,QCKc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c7721ee.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Pokecard.css';\r\n\r\nconst URL = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n\r\nlet padToThree = (number) => (number <= 999 ? `00${number}`.slice(-3) : number);\r\n\r\nclass Pokecard extends Component {\r\n    render() {\r\n        let imgSrc = `${URL}${padToThree(this.props.id)}.png`;\r\n        return (\r\n        <div className='Pokecard'>\r\n            <h1>{this.props.name}</h1>\r\n            <div className=\"test\">\r\n                <img src={imgSrc} alt={this.props.name}/>\r\n            </div>\r\n            <div className=\"Pokecard-data\">TYPE: {this.props.type}</div>\r\n            <div className=\"Pokecard-data\">EXP: {this.props.exp}</div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default Pokecard;","import React, {Component} from 'react';\r\nimport Pokecard from './Pokecard';\r\nimport './Pokedex.css';\r\n\r\nclass Pokedex extends Component {\r\n    render() {\r\n        let title;\r\n        if (this.props.isWinner) {\r\n            title = <h1 className='Pokedex-winner'> Winning Hand </h1>;\r\n        } else {\r\n            title = <h1 className='Pokedex-loser'> Winning Hand </h1>;\r\n        }\r\n        return(\r\n            <div className=\"Pokedex\">\r\n                {title}\r\n                <h4>Total Experience : {this.props.exp}</h4>\r\n                    <div className=\"pokedex-card\">\r\n                        {this.props.Pokemon.map((p, name) => (\r\n                            <Pokecard id={p.id} name={p.name} type={p.type} exp={p.base_experience} key={name} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokedex;","import React, {Component} from 'react';\r\nimport Pokedex from'./Pokedex';\r\n\r\nclass Pokegame extends Component {\r\n    static defaultProps = {\r\n        Pokemon : [\r\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n        ]\r\n    };\r\n    render() {\r\n        let hand1 = [];\r\n        let hand2 = [...this.props.Pokemon];\r\n        while(hand1.length < hand2.length) {\r\n            let randIdx = Math.floor(Math.random() * hand2.length);\r\n            let randPokemon =hand2.splice(randIdx,1)[0];\r\n            hand1.push(randPokemon);\r\n        }\r\n        let exp1 = hand1.reduce((exp, Pokemon) => exp + Pokemon.base_experience,\r\n    0);\r\n        let exp2 = hand2.reduce((exp, Pokemon) => exp + Pokemon.base_experience,\r\n    0);\r\n        return(\r\n            <div>\r\n                <Pokedex Pokemon= {hand1} exp={exp1} isWinner={exp1 > exp2} /> \r\n                <Pokedex Pokemon= {hand2} exp={exp2} isWinner={exp2 > exp1} /> \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Pokegame;","import React from 'react';\nimport Pokegame from './Pokegame';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}